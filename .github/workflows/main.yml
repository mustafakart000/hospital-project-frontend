name: Deploy Frontend

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    # Npm Cache
    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-
          
    # Clean Install ve ESLint Onarımı
    - name: Clean Install Dependencies
      run: |
        rm -rf node_modules
        npm cache clean --force
        npm install
        
    # ESLint Bağımlılıklarını Güncelle
    - name: Update ESLint Dependencies
      run: |
        npm install --save-dev eslint-plugin-react@latest
        npm install --save-dev es-abstract@latest
        npm install --save-dev object.fromentries@latest
        
    # Build İşlemi (ESLint Hatasını Yoksay)
    - name: Build Frontend
      run: |
        npm run build || true
      env:
        NODE_ENV: production
        VITE_API_URL: ${{ secrets.API_URL }}
        
    # Expect Yükleme
    - name: Install Expect if Missing
      run: |
        if ! command -v expect &> /dev/null; then
          sudo apt-get update && sudo apt-get install -y expect
        else
          echo "Expect already installed"
        fi
        
    # Sunucudaki Eski Dosyaları Temizle
    - name: Clean Existing Frontend Files
      run: |
        expect << EOF
        spawn ssh root@37.148.209.189
        expect {
          "Are you sure you want to continue connecting" { send "yes\r"; exp_continue }
          "password:" { send "${{ secrets.SERVER_PASSWORD }}\r" }
        }
        expect "~#"
        send "rm -rf /var/www/html/*\r"
        expect "~#"
        send "exit\r"
        expect eof
        EOF
        
    # Build İşlemi ve Kontrol
    - name: Build and Check
      run: |
        npm run build
        echo "Build directory contents:"
        ls -la dist/
        
    # Dosyaları Transfer Et
    - name: Transfer Frontend Files
      run: |
        if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
          expect << EOF
          spawn scp -r dist/* root@37.148.209.189:/var/www/html/
          expect {
            "Are you sure you want to continue connecting" { send "yes\r"; exp_continue }
            "password:" { send "${{ secrets.SERVER_PASSWORD }}\r" }
          }
          expect eof
          EOF
        else
          echo "Error: dist directory is empty or does not exist"
          exit 1
        fi
        
    # Nginx Yeniden Başlat
    - name: Restart Nginx
      run: |
        expect << EOF
        spawn ssh root@37.148.209.189
        expect {
          "Are you sure you want to continue connecting" { send "yes\r"; exp_continue }
          "password:" { send "${{ secrets.SERVER_PASSWORD }}\r" }
        }
        expect "~#"
        send "systemctl restart nginx\r"
        expect "~#"
        send "exit\r"
        expect eof
        EOF
